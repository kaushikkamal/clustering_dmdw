Write a function that will perform the clustering of some data for which all attributes are numeric (real).
The program must be able to decide the number of attributes in the dataset, as well as the number of records (if needed). 
Data were stored in a text file, One line is equivalent to one record and each column is equivalent to one attribute.  each of the attribute is separated by tab. And the first attribute is the record ID (a serial number, not to be used for clustering purpose)
A record must be represented by a structure variable in the program. In other words a Array of that structure variable will represent the dataset in Computer's memory.
 
The structure should have the following provisions.
able to store the number of attributes to be used for clustering.
able to store the record ID,
able to store the attributes to be used for clustering.
A integer value that is the final decided cluster number (negative value will indicate not yet clustered).
You may add maximum two more fields to the structure to simplify the activity of your clustering algorithm.
The program will produce the output that is the list of record numbers separated by comma for each of the cluster formed by your algorithm.

The main function should only accept the user parameters, memory reservation for the dataset (if needed) and coordinate the other functions And releasing the memory (if reserved).
you need to write separate functions for inputing the datapoints, displaying the output, and do the clusteing. You may write other functions to support you codes (such as calculating the distance, calculating the average etc.)

Use the PAM algorithm for clustering. The dataset, the number of cluster will be sent as parameters to the function. And will return the representative objects after the clustering is done. Before the above mentioned output are produced, display the representative objects in a human readable form.

Write all your code in a single C source file.
Mark distribution.
Data types selection 5
Data representation  5
data representation efficiency 5
sub programming adequecy  5
sub program design efficiency 5
memory management    5
user convenience   5
coding 15